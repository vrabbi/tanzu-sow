#@ load("@ytt:data", "data")
#@ load("@ytt:yaml", "yaml")
---
#@ overlayRefs = {}
#@ for file in data.list():
#@   if file.endswith("overlay.yaml"):
#@     content = yaml.decode(data.read(file))
#@     name = content['metadata']['name']
#@     pkg = content['metadata']['annotations']['package-to-overlay']
#@     found = False
#@     for key in overlayRefs.keys():
#@       if key == pkg:
#@         found = True
#@       end
#@     end
#@     if found:
#@       overlayRefs[pkg].append(name)
#@     else:
#@       overlayRefs.update({pkg: [name]})
#@     end
#@   end
#@ end

profile: full
ceip_policy_disclosed: true

shared:
  ingress_domain: #@ data.values.ingressDomain
  #@ if data.values.internalCA != "":
  ca_cert_data: #@ data.values.internalCA
  #@ end
  image_registry:
    project_path: #@ "{}/{}".format(data.values.registryFqdn, data.values.registryProject)
    username: #@ data.values.buildservice.username
    password: #@ data.values.buildservice.password
    
cnrs:
  domain_template: "{{.Name}}.{{.Namespace}}.{{.Domain}}"
  
tap_telemetry:
  customer_entitlement_account_number: #@ data.values.vmwareAccountNumber

buildservice:
  exclude_dependencies: true

supply_chain: SUPPLY_CHAIN_OF_CHOICE

ootb_supply_chain_basic:
  registry:
    server: #@ data.values.registryFqdn
    repository: #@ data.values.registryProject
  gitops:
    ssh_secret: "git-creds"
    #@ if data.values.deliveryMethod != "regOps":
    server_address: #@ data.values.git.serverUrl
    repository_owner: #@ data.values.git.org
    repository_name: #@ data.values.git.gitopsRepoName
    branch: #@ data.values.git.gitOpsDefaultBranch
    #@ if data.values.deliveryMethod == "pull_request":
    commit_strategy: pull_request
    pull_request:
      server_kind: GIT_KIND
      commit_branch: ""
      pull_request_title: ready for review
      pull_request_body: generated by supply chain
    #@ end
    #@ end

tap_gui:
  service_type: ClusterIP
  app_config:
    auth:
      allowGuestAuth: #@ data.values.tapGui.auth.enableGuestAuth
      #@ if data.values.tapGui.auth.provider != "none":
      environment: development
      providers:
        #@ if data.values.tapGui.auth.provider == "github":
        github:
          development:
            clientId: #@ data.values.tapGui.auth.github.clientId
            clientSecret: #@ data.values.tapGui.auth.github.clientSecret
            #@ if hasattr(data.values.tapGui.auth.github,"enterpriseInstanceUrl"):
            enterpriseInstanceUrl: #@ data.values.tapGui.auth.github.enterpriseInstanceUrl
            #@ end
        #@ end
        #@ if data.values.tapGui.auth.provider == "okta":
        okta:
          development:
            clientId: #@ data.values.tapGui.auth.okta.clientId
            clientSecret: #@ data.values.tapGui.auth.okta.clientSecret
            audience: #@ data.values.tapGui.auth.okta.audience
            #@ if hasattr(data.values.tapGui.auth.okta,"authServerId"):
            authServerId: #@ data.values.tapGui.auth.okta.authServerId
            #@ end
            #@ if hasattr(data.values.tapGui.auth.okta,"idp"):
            idp: #@ data.values.tapGui.auth.okta.idp
            #@ end
        #@ end
        #@ if data.values.tapGui.auth.provider == "gitlab":
        gitlab:
          development:
            clientId: #@ data.values.tapGui.auth.gitlab.clientId
            clientSecret: #@ data.values.tapGui.auth.gitlab.clientSecret
            #@ if hasattr(data.values.tapGui.auth.gitlab,"audience"):
            audience: #@ data.values.tapGui.auth.gitlab.audience
            #@ end
            #@ if hasattr(data.values.tapGui.auth.gitlab,"callbackUrl"):
            callbackUrl: #@ data.values.tapGui.auth.gitlab.callbackUrl
            #@ end
        #@ end
        #@ if data.values.tapGui.auth.provider == "azureAD":
        microsoft:
          development:
            clientId: #@ data.values.tapGui.auth.azureAD.clientId
            clientSecret: #@ data.values.tapGui.auth.azureAD.clientSecret
            tenantId: #@ data.values.tapGui.auth.azureAD.tenantId
        #@ end
        #@ if data.values.tapGui.auth.provider == "google":
        google:
          development:
            clientId: #@ data.values.tapGui.auth.google.clientId
            clientSecret: #@ data.values.tapGui.auth.google.clientSecret
        #@ end
      #@ end
    customize:
      custom_name: 'CUSTOMER_NAME Developer Portal'
      default_route: '/catalog?filters%5Bkind%5D=component&filters%5Buser%5D=all'
    organization:
      name: 'CUSTOMER_NAME'
    app:
      title: 'CUSTOMER_NAME Developer Portal'
      support:
        url: https://tanzu.vmware.com/support
        items:
          - title: Contact Support
            icon: email
            links:
            - url: https://tanzu.vmware.com/support
              title: Tanzu Support Page
          - title: Documentation
            icon: docs
            links:
            - url: https://docs.vmware.com/en/VMware-Tanzu-Application-Platform/index.html
              title: Tanzu Application Platform Documentation
    techdocs:
      generator:
        runIn: 'docker'
        dockerImage: #@ "{}/{}/techdocs:{}".format(data.values.registryFqdn,data.values.registryProject,data.values.imageTags.techdocs)
    metadataStoreAutoconfiguration: true
    catalog:
      locations:
        - type: url
          target: #@ "{}/catalog-info.yaml".format(data.values.git.serverUrl)
    backend:
      database:
        client: pg
        connection:
          host: tap-gui-db-postgresql-primary.tap-gui-backend.svc.cluster.local
          port: 5432
          user: postgres
          password: #@ data.values.tapGui.psqlPassword
          ssl: false
            
appliveview:
  ingressEnabled: true

package_overlays:
#@ for packageName in overlayRefs:
- name: #@ packageName
  secrets:
  #@ for secretName in overlayRefs[packageName]:
  - name: #@ secretName
  #@ end
#@ end
