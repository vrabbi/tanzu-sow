---
apiVersion: v1
kind: Secret
metadata:
  name: source-details-annotations-overlay
  namespace: tap-install
  annotations:
    package-to-overlay: "ootb-templates"
type: Opaque
stringData:
  git-private-ca-overlay.yaml: |
    #@ load("@ytt:data", "data")
    #@ load("@ytt:overlay","overlay")
    
    #@ def config_template_matcher():
    apiVersion: carto.run/v1alpha1
    kind: ClusterConfigTemplate
    metadata:
      name: config-template
    #@ end

    #@ def config_writer_template_matcher():
    apiVersion: carto.run/v1alpha1
    kind: ClusterTemplate
    metadata:
      name: config-writer-template
    #@ end

    #@ def git_writer_matcher():
    apiVersion: tekton.dev/v1beta1
    kind: ClusterTask
    metadata:
      name: git-writer
    #@ end
    
    #@overlay/match by=overlay.subset(config_template_matcher())
    ---
    #@overlay/match-child-defaults missing_ok=True
    spec:
      ytt: |-
        #@ load("@ytt:data", "data")
        #@ load("@ytt:yaml", "yaml")
        #@ load("@ytt:overlay", "overlay")
        #@ def merge_labels(fixed_values):
        #@   labels = {}
        #@   if hasattr(data.values.workload.metadata, "labels"):
        #@     labels.update(data.values.workload.metadata.labels)
        #@   end
        #@   labels.update(fixed_values)
        #@   return labels
        #@ end
    
        #@ def fix_permissions():
        spec:
          containers:
          #@overlay/match by="name"
          #@overlay/match-child-defaults missing_ok=True
          - name: workload
            securityContext:
              #@ if hasattr(data.values.config.spec.containers[0],"securityContext"):
              #@ if not hasattr(data.values.config.spec.containers[0].securityContext, "runAsGroup"):
              runAsGroup: 1000
              #@ end
              #@ if hasattr(data.values.config.spec.containers[0].securityContext, "runAsUser"):
              #@ if data.values.config.spec.containers[0].securityContext.runAsUser == 1000:
              runAsUser: 1001
              #@ end
              #@ end
              #@ end
        #@ end
    
        #@ def delivery():
        apiVersion: serving.knative.dev/v1
        kind: Service
        metadata:
          name: #@ data.values.workload.metadata.name
          #! annotations NOT merged because knative annotations would be invalid here
          annotations:
            #@ if hasattr(data.values.workload.spec.source, "git"):
            terasky.tap.tracability/git-repo: #@ data.values.workload.spec.source.git.url
            terasky.tap.tracability/source-git-commit: #@ data.values.source.url.split("/")[-1].split(".")[0]
            #@ if hasattr(data.values.workload.spec.source.git.ref, "branch"):
            terasky.tap.tracability/git-branch: #@ data.values.workload.spec.source.git.ref.branch
            #@ end
            #@ if hasattr(data.values.workload.spec.source.git.ref, "tag"):
            terasky.tap.tracability/git-tag: #@ data.values.workload.spec.source.git.ref.tag
            #@ end
            #@ end
            #@ if hasattr(data.values.workload.spec.source, "subPath"):
            terasky.tap.tracability/sub-path: #@ data.values.workload.spec.source.subPath
            #@ end
            #@ if hasattr(data.values.workload.spec.source, "image"):
            terasky.tap.tracability/source-image: #@ data.values.workload.spec.source.image
            terasky.tap.tracability/source-image-sha: #@ "sha256:{}".format(data.values.source.url.split("/")[-1].split(".")[0])
            #@ end
            ootb.apps.tanzu.vmware.com/servicebinding-workload: "true"
            ootb.apps.tanzu.vmware.com/apidescriptor-ref: "true"
            kapp.k14s.io/change-rule: "upsert after upserting servicebinding.io/ServiceBindings"
          labels: #@ merge_labels({ "app.kubernetes.io/component": "run", "carto.run/workload-name": data.values.workload.metadata.name })
        spec:
          template: #@ overlay.apply(data.values.config,fix_permissions())
        #@ end
    
        ---
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: #@ data.values.workload.metadata.name
          labels: #@ merge_labels({ "app.kubernetes.io/component": "config" })
        data:
          delivery.yml: #@ yaml.encode(delivery())

    #@overlay/match by=overlay.subset(config_writer_template_matcher())
    ---
    #@overlay/match-child-defaults missing_ok=True
    spec:
      ytt: |
        #@ load("@ytt:data", "data")
        #@ load("@ytt:json", "json")
        #@ load("@ytt:base64", "base64")
        #@ load("@ytt:assert", "assert")

        #@ def merge_labels(fixed_values):
        #@   labels = {}
        #@   if hasattr(data.values.workload.metadata, "labels"):
        #@     labels.update(data.values.workload.metadata.labels)
        #@   end
        #@   labels.update(fixed_values)
        #@   return labels
        #@ end

        #@ def is_monorepo_approach():
        #@   if 'gitops_server_address' in data.values.params and 'gitops_repository_owner' in data.values.params and 'gitops_repository_name' in data.values.params:
        #@     return True
        #@   end
        #@   if 'gitops_server_address' in data.values.params or 'gitops_repository_owner' in data.values.params or 'gitops_repository_name' in data.values.params:
        #@     'gitops_server_address' in data.values.params or assert.fail("missing param: gitops_server_address")
        #@     'gitops_repository_owner' in data.values.params or assert.fail("missing param: gitops_repository_owner")
        #@     'gitops_repository_name' in data.values.params or assert.fail("missing param: gitops_repository_name")
        #@   end
        #@   return False
        #@ end

        #@ def has_git_params():
        #@   if 'gitops_repository_prefix' in data.values.params:
        #@     return True
        #@   end
        #@
        #@   if 'gitops_repository' in data.values.params:
        #@     return True
        #@   end
        #@
        #@   return False
        #@ end

        #@ def is_gitops():
        #@   return is_monorepo_approach() or has_git_params()
        #@ end

        #@ def param(key):
        #@   if not key in data.values.params:
        #@     return None
        #@   end
        #@   return data.values.params[key]
        #@ end

        #@ def strip_trailing_slash(some_string):
        #@   if some_string[-1] == "/":
        #@     return some_string[:-1]
        #@   end
        #@   return some_string
        #@ end

        #@ def mono_repository():
        #@   strip_trailing_slash(data.values.params.gitops_server_address)
        #@   if param("gitops_server_kind") == "azure":
        #@     return "/".join([
        #@       strip_trailing_slash(data.values.params.gitops_server_address),
        #@       strip_trailing_slash(data.values.params.gitops_repository_owner),
        #@       "_git",
        #@       data.values.params.gitops_repository_name,
        #@     ])
        #@   end
        #@
        #@   return "/".join([
        #@     strip_trailing_slash(data.values.params.gitops_server_address),
        #@     strip_trailing_slash(data.values.params.gitops_repository_owner),
        #@     data.values.params.gitops_repository_name,
        #@   ]) + ".git"
        #@ end

        #@ def git_repository():
        #@   if is_monorepo_approach():
        #@     return mono_repository()
        #@   end
        #@
        #@   if 'gitops_repository' in data.values.params:
        #@     return param("gitops_repository")
        #@   end
        #@
        #@   prefix = param("gitops_repository_prefix")
        #@   if param("gitops_server_kind") == "azure":
        #@     return prefix + data.values.workload.metadata.name
        #@   end
        #@   return prefix + data.values.workload.metadata.name + ".git"
        #@ end

        #@ def image():
        #@   return "/".join([
        #@    data.values.params.registry.server,
        #@    data.values.params.registry.repository,
        #@    "-".join([
        #@      data.values.workload.metadata.name,
        #@      data.values.workload.metadata.namespace,
        #@      "bundle",
        #@    ])
        #@   ]) + ":" + data.values.workload.metadata.uid
        #@ end

        #@ def ca_cert_data():
        #@   if "ca_cert_data" not in param("registry"):
        #@     return ""
        #@   end
        #@
        #@   return param("registry")["ca_cert_data"]
        #@ end

        ---
        apiVersion: carto.run/v1alpha1
        kind: Runnable
        metadata:
          name: #@ data.values.workload.metadata.name + "-config-writer"
          labels: #@ merge_labels({ "app.kubernetes.io/component": "config-writer" })
        spec:
          #@ if/end hasattr(data.values.workload.spec, "serviceAccountName"):
          serviceAccountName: #@ data.values.workload.spec.serviceAccountName

          runTemplateRef:
            name: tekton-taskrun

          inputs:
            serviceAccount: #@ data.values.params.serviceAccount
            taskRef:
              kind: ClusterTask
              name: #@ "git-writer" if is_gitops() else "image-writer"
            params:
              - name: ca_cert_data
                value: #@ ca_cert_data()
              #@ if is_gitops():
              - name: git_repository
                value: #@ git_repository()
              - name: git_branch
                value: #@ param("gitops_branch")
              - name: git_user_name
                value: #@ param("gitops_user_name")
              - name: git_user_email
                value: #@ param("gitops_user_email")
              - name: git_commit_message
                value: #@ param("gitops_commit_message")
              - name: git_files
                value: #@ base64.encode(json.encode(data.values.config))
              #@ if/end is_monorepo_approach():
              - name: sub_path
                value: #@ "config/" + data.values.workload.metadata.namespace + "/" + data.values.workload.metadata.name
              #@ else:
              - name: files
                value: #@ base64.encode(json.encode(data.values.config))
              - name: bundle
                value: #@ image()
    #@overlay/match by=overlay.subset(git_writer_matcher())
    ---
    #@overlay/match-child-defaults missing_ok=True
    spec:
      params:
      - default: ""
        description: |
          PEM encoded certificate data for the image registry where the files will be pushed to.
        name: ca_cert_data
        type: string
      steps:
      #@overlay/match by="name"
      #@overlay/match-child-defaults missing_ok=True
      - name: git-clone-and-push
        script: |
          #!/usr/bin/env bash

          set -o errexit
          set -o xtrace

          if [[ ! -z "$(params.ca_cert_data)" ]]; then
            certs_dir=$(mktemp -d)
            echo "$(params.ca_cert_data)" > $certs_dir/cert.pem
            git config --global http.sslCAInfo $certs_dir/cert.pem
          fi

          ssh_config_file=$(mktemp)

          echo "
          UserKnownHostsFile /tekton/creds/.ssh/known_hosts
          Include $(credentials.path)/.ssh/config
          " > $ssh_config_file

          export GIT_SSH_COMMAND="ssh -F $ssh_config_file"

          cd `mktemp -d`

          if git clone --depth 1 -b "$(params.git_branch)" "$(params.git_repository)" ./repo; then
            cd ./repo
          else
            git clone --depth 1 "$(params.git_repository)" ./repo
            cd ./repo
            git checkout -b "$(params.git_branch)"
          fi

          git config user.email "$(params.git_user_email)"
          git config user.name "$(params.git_user_name)"

          mkdir -p $(params.sub_path) && rm -rf $(params.sub_path)/*
          cd $(params.sub_path)

          echo '$(params.git_files)' | base64 --decode > files.json
          eval "$(cat files.json | jq -r 'to_entries | .[] | @sh "mkdir -p $(dirname \(.key)) && echo \(.value) > \(.key) && git add \(.key)"')"

          git commit -m "$(params.git_commit_message)" --allow-empty
          
          if git diff origin/$(params.git_branch) HEAD | grep -E -i '[[:blank:]]image:'
          then
            git push origin $(params.git_branch)
          else
            FILES=`git diff origin/$(params.git_branch) HEAD --name-only --no-commit-id -r`
            CHANGED="no"
            for f in $FILES
            do
              n=`basename $f`
              if [ "$n" != "delivery.yml" ]; then
                CHANGED="yes"
              fi
            done
            if [ "$CHANGED" == "yes" ]; then
              echo "changes to not delivery.yml files was made. Pushing the changes to git..."
              git push origin $(params.git_branch)
            else
              echo "No real changes made. Not pushing to git"
            fi
          fi