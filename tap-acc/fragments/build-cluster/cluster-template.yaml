#@ load("@ytt:data", "data")
#@ load("@ytt:yaml", "yaml")
---
#@ overlayRefs = {}
#@ for file in data.list():
#@   if file.endswith("overlay.yaml"):
#@     content = yaml.decode(data.read(file))
#@     name = content['metadata']['name']
#@     pkg = content['metadata']['annotations']['package-to-overlay']
#@     found = False
#@     for key in overlayRefs.keys():
#@       if key == pkg:
#@         found = True
#@       end
#@     end
#@     if found:
#@       overlayRefs[pkg].append(name)
#@     else:
#@       overlayRefs.update({pkg: [name]})
#@     end
#@   end
#@ end

profile: build
ceip_policy_disclosed: true

shared:
  #@ if data.values.internalCA != "":
  ca_cert_data: #@ data.values.internalCA
  #@ end
  image_registry:
    project_path: #@ "{}/{}".format(data.values.registryFqdn, data.values.registryProject)
    username: #@ data.values.buildservice.username
    password: #@ data.values.buildservice.password
  
tap_telemetry:
  customer_entitlement_account_number: #@ data.values.vmwareAccountNumber

buildservice:
  exclude_dependencies: true

supply_chain: SUPPLY_CHAIN_OF_CHOICE

ootb_supply_chain_basic:
  registry:
    server: #@ data.values.registryFqdn
    repository: #@ data.values.registryProject
  gitops:
    ssh_secret: "git-creds"
    #@ if data.values.deliveryMethod != "regOps":
    server_address: #@ data.values.git.serverUrl
    repository_owner: #@ data.values.git.org
    repository_name: #@ data.values.git.gitopsRepoName
    branch: #@ data.values.git.gitOpsDefaultBranch
    #@ if data.values.deliveryMethod == "pull_request":
    commit_strategy: pull_request
    pull_request:
      server_kind: GIT_KIND
      commit_branch: ""
      pull_request_title: ready for review
      pull_request_body: generated by supply chain
    #@ end
    #@ end

package_overlays:
#@ for packageName in overlayRefs:
- name: #@ packageName
  secrets:
  #@ for secretName in overlayRefs[packageName]:
  - name: #@ secretName
  #@ end
#@ end
